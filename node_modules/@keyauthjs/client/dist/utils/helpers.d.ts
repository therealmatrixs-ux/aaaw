import type { DownloadResponse, Info } from "../types";
/**
 * Calculates the time elapsed since a given date or timestamp.
 *
 * @param {Date | string} timeSince - The date or timestamp to calculate the time since.
 * @returns {string | 0} - A string describing the time elapsed or 0 if it's less than a minute.
 */
export declare function timeSince(timeSince: Date | string): string | 0;
/**
 * Converts a Unix timestamp to a local Date object.
 *
 * @param {string} timestampString - The Unix timestamp as a string.
 * @returns {Date} - A Date object representing the local date and time.
 */
export declare function convertUnixTimestampToLocalDate(timestampString: string): Date;
/**
 * Calculates the time remaining until a given expiry date or timestamp.
 *
 * @param {Date | string} expiry - The expiry date or timestamp.
 * @returns {string} - A string describing the time remaining.
 */
export declare function timeUntilExpiry(expiry: Date | string): string;
/**
 * Converts a downloaded response to a string.
 *
 * @param {DownloadResponse} downloadResponse - The response containing downloadable content.
 * @returns {string} - The downloaded content as a string.
 */
export declare function downloadToString(downloadResponse: DownloadResponse): string;
/**
 * Downloads content to a file.
 *
 * @param {DownloadResponse} downloadResponse - The response containing downloadable content.
 * @param {string} name - The name of the file.
 * @param {string} fileType - The type or extension of the file.
 * @param {string} location - The location where the file will be saved.
 */
export declare function downloadToFile(downloadResponse: DownloadResponse, name: string, fileType: string, location: string): void;
/**
 * Converts timestamps in user data to local Date objects.
 *
 * @param {Info} data - User information object containing timestamps.
 * @returns {Info} - User information object with converted timestamps.
 */
export declare function convertTimestampsToLocalDates(data: Info): Info;
//# sourceMappingURL=helpers.d.ts.map