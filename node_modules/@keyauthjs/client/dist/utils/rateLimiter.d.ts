/**
 * RateLimiter is a class that provides rate limiting functionality based on the Token Bucket algorithm.
 * It allows you to control the rate at which requests are allowed to be made.
 */
export declare class RateLimiter {
    private tokens;
    private lastRefillTime;
    private refillRate;
    private maxTokens;
    /**
     * Creates a RateLimiter instance.
     *
     * @param {Object} options - Configuration options for the RateLimiter.
     * @param {number} options.maxTokens - The maximum number of tokens in the bucket.
     * @param {number} options.refillRate - The rate at which tokens are refilled (tokens per millisecond).
     * @throws {Error} - Throws an error if `refillRate` or `maxTokens` is not greater than zero.
     */
    constructor({ maxTokens, refillRate, }: {
        maxTokens: number;
        refillRate: number;
    });
    /**
     * Refills the token bucket based on the elapsed time.
     */
    private refill;
    /**
     * Checks if the rate limit has been hit.
     *
     * @returns {boolean} - True if the rate limit has been hit, otherwise false.
     */
    hasHitRateLimit(): boolean;
    /**
     * Calculates the time (in milliseconds) until a request can be made.
     *
     * @returns {number} - The time until a request can be made.
     */
    getTimeUntilCanMakeRequest(): number;
    /**
     * Asynchronously waits until a request can be made based on the rate limit.
     */
    private sleep;
    /**
     * Asynchronously waits until a request can be made and resets the token count to the maximum.
     */
    waitUntilCanMakeRequest(): Promise<void>;
    /**
     * Returns a human-readable string indicating the time until a request can be made.
     *
     * @returns {string} - A human-readable time string.
     */
    getTimeUntilCanMakeRequestString(): string;
}
//# sourceMappingURL=rateLimiter.d.ts.map