"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Import necessary modules and types
const winston_1 = __importStar(require("winston"));
/**
 * CustomLogger class for creating and configuring a custom logger based on Winston.
 * Used in the logging for keyauth ClientAPI
 */
class CustomLogger {
    /**
     * Constructs a CustomLogger instance.
     * @param {keyauthLogger} options - The logger options.
     * @param {string} options.name - The logger name.
     * @param {boolean} options.active - Whether the logger is active or not.
     * @param {string} options.level - The logging level (e.g., "error", "info").
     */
    constructor(options) {
        var _a;
        this._name = options.name;
        // Defining custom log levels and colors
        const customLevels = {
            error: 0,
            warning: 1,
            info: 2,
            debug: 3,
        };
        // Define custom log colors
        winston_1.default.addColors({
            error: "red",
            warning: "yellow",
            info: "blue",
            debug: "gray",
        });
        // Create the Winston logger instance with custom levels and desired configurations
        this._logger = winston_1.default.createLogger({
            // Control whether the logger is silent or not
            silent: options.active === true ? false : true !== null && true !== void 0 ? true : true,
            levels: customLevels,
            // Set the logging level (default to "error")
            level: (_a = options.level) !== null && _a !== void 0 ? _a : "error",
            format: winston_1.default.format.combine(
            // Apply color to console output
            winston_1.default.format.colorize(), winston_1.default.format.timestamp(), 
            // Define the log message format
            winston_1.default.format.printf(({ timestamp, level, message, name, tag }) => {
                return `${timestamp} [${name}] [${tag}|${level}]: ${message}`;
            })),
            transports: [
                new winston_1.transports.Console(), // Log to console
            ],
        });
    }
    /**
     * Log an error message.
     * @param {string} tag - The log tag.
     * @param {string} message - The error message.
     */
    error(tag, message) {
        this._logger.log("error", message, { name: this._name, tag });
    }
    /**
     * Log a warning message.
     * @param {string} tag - The log tag.
     * @param {string} message - The warning message.
     */
    warning(tag, message) {
        this._logger.log("warning", message, { name: this._name, tag });
    }
    /**
     * Log an info message.
     * @param {string} tag - The log tag.
     * @param {string} message - The info message.
     */
    info(tag, message) {
        this._logger.log("info", message, { name: this._name, tag });
    }
    /**
     * Log a debug message.
     * @param {string} tag - The log tag.
     * @param {string} message - The debug message.
     */
    debug(tag, message) {
        this._logger.log("debug", message, { name: this._name, tag });
    }
}
exports.default = CustomLogger;
