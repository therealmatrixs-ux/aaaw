import { App, ClientOptions, EventMap, InitResponse, LoginResponse, Login, Logout, LogoutResponse, Register, RegisterResponse, License, LicenseResponse, Ban, BanResponse, Check, CheckResponse, MetaData, Chat, Var, CheckBlacklist, CheckBlacklistResponse, ChangeUsername, ChangeUsernameResponse, ForgotPassword, ForgotPasswordResponse, Upgrade, UpgradeResponse, FetchOnlineUsers, FetchOnlineUsersResponse, FetchStatsResponse, FetchStats, LogResponse, Log, Webhook, WebhookResponse, Download, DownloadResponse } from "../types";
/**
 * KeyAuth Client API Wrapper
 *
 * This class provides a TypeScript wrapper for the KeyAuth.cc API.
 *
 * It allows you to interact with various API endpoints for user management and more.
 */
export default class Api {
    /**
     * Axios instance for making HTTP requests.
     * @private
     */
    private _axiosInstance;
    /**
     * Logger for debugging and logging.
     * @private
     */
    private _logger;
    /**
     * Information about the app.
     * @private
     */
    private _app;
    /**
     * Flag to track whether the client has been initialized.
     * @private
     */
    private _initializedClient;
    /**
     * Rate limiter for API requests.
     * @private
     */
    private _rateLimiter;
    /**
     * EventEmitter for handling events.
     * @private
     */
    private _eventEmitter;
    /**
     * Flag to determine whether to convert timestamps to local dates.
     * @private
     */
    private _convertTimes;
    /**
     * KeyAuth Client API Wrapper
     *
     * This class provides a TypeScript wrapper for the KeyAuth.cc API.
     *
     * It allows you to interact with various API endpoints for user management and more.
     *
     * Constructor for the Api class.
     * @param {App} `app` - App details can be found on the keyauth dashboard.
     * @param {App['name']} `app.name` - The application name.
     * @param {App['ownerid']} `app.ownerid` - The application ownerID.
     * @param {App['ver']} `app.ownerid` - The application version.
     *
     * @param {ClientOptions} [options] - Client api options all optional.
     * @param {ClientOptions['baseUrl']} `options.baseUrl` - To change the base url from https://keyauth.win/api/1.2/ to anything you like.
     * @param {ClientOptions['convertTimes']} `options.convertTimes` - To convert all times to readable times example like sub expiry.
     * @param {ClientOptions['logger']} `options.logger` - All the logger options.
     * @param {ClientOptions['ratelimit']} `options.ratelimit` - override the global rate limit set on the package.
     */
    constructor(app: App, options?: ClientOptions);
    /**
     * Register an event listener for a specific event type.
     *
     * @template E - The type of the event.
     * @param {E} event - The event type to listen for.
     * @param {EventMap[E]} callback - The callback function to execute when the event occurs.
     */
    on<E extends keyof EventMap>(event: E, callback: EventMap[E]): void;
    /**
     * Register a one-time event listener for a specific event type.
     * The listener will be automatically removed after it's been called once.
     *
     * @template E - The type of the event.
     * @param {E} event - The event type to listen for.
     * @param {EventMap[E]} callback - The callback function to execute when the event occurs.
     */
    once<E extends keyof EventMap>(event: E, callback: EventMap[E]): void;
    /**
     * Makes a request to the Keyauth API with the provided parameters.
     *
     * @param {MakerRequest} options - The parameters for the API request.
     * @returns {Promise<ApiResponse>} A promise that resolves to the API response.
     * @throws {AxiosError} If there is an issue with the Axios HTTP request.
     * @private
     */
    private _makeRequest;
    /**
     * Checks if the API client has been properly initialized with required configurations.
     *
     * @returns {boolean} True if the API client is initialized, false otherwise.
     * @throws {Error} Throws an error if the API client is not properly initialized.
     * @private
     */
    private _checkInitialization;
    /**
     * Checks if a user is logged in based on their session ID.
     *
     * @param {string} sessionId - The session ID of the user to check.
     * @returns {Promise<void>} Resolves if the user is logged in, rejects with an error otherwise.
     * @throws {Error} Throws an error if the user is not logged in or if the API client is not initialized.
     * @private
     */
    private _checkUserLogin;
    /**
     * Initialize the KeyAuth API.
     * This function initializes the API client, ensuring it's ready for use.
     *
     * @see https://keyauth.readme.io/reference/initialization
     * @returns {Promise<InitResponse>} - A promise containing the initialization response.
     */
    init(): Promise<InitResponse>;
    /**
     * Log in a user with provided credentials.
     * This function attempts to authenticate a user with a username and password.
     *
     * @see https://keyauth.readme.io/reference/login
     *
     * @template D - A generic parameter representing metaData.
     * @param {Login} `options` - The login options including username, password, and session information.
     * @param {Login['sessionId']} `options.sessionId` - The current session ID.
     * @param {Login['username']} `options.username` - The username of the person logging in.
     * @param {Login['password']} `options.password` - The password of the person logging in.
     * @param {Login['hwid']} [options.hwid] - The hwid of the person logging in if needed.
     * @returns {Promise<LoginResponse<D>>} - A promise containing the login response, including user metadata.
     */
    login({ username, password, hwid, sessionId, }: Login): Promise<LoginResponse>;
    /**
     * Log out a user with the provided session ID.
     * This function logs out a user, revoking their session and clearing their user information.
     *
     * @see https://keyauth.readme.io/reference/logout
     *
     * @param {Logout} `options` - The logout options including the session ID.
     * @param {Logout['sessionId']} `options.sessionId` - The current session ID.
     * @returns {Promise<LogoutResponse>} - A promise containing the logout response.
     */
    logout({ sessionId }: Logout): Promise<LogoutResponse>;
    /**
     * Register a new user with the provided registration details.
     * This function creates a new user account and associates it with the provided session ID.
     *
     * @see https://keyauth.readme.io/reference/register
     *
     * @template D - A generic parameter representing metaData.
     * @param {Register} `options` - The registration options including username, password, key, etc.
     * @param {Register<D>['username']} `options.username` - The username of the new user.
     * @param {Register<D>['password']} `options.password` - The password of the new user.
     * @param {Register<D>['key']} `options.key` - The key needed for the user to register.
     * @param {Register<D>['sessionId']} `options.sessionId` - The session Id of the current session.
     * @param {Register<D>['metaData']} `options.metaData` - The metaData to set upon registering.
     * @param {Register<D>['email']} [options.email] - The email address of the new user if you would to set one.
     * @returns {Promise<RegisterResponse>} - A promise containing the registration response.
     */
    register({ username, password, key, sessionId, email, metaData, }: Register): Promise<RegisterResponse>;
    /**
     * Log in or register a user using a license key.
     * This function allows a user to authenticate or register with the provided license key.
     *
     * @see https://keyauth.readme.io/reference/license
     *
     * @param {License} options - The license options including the license key, session ID, etc.
     * @param {License['license']} `options.license` - The license key needed to register.
     * @param {License['sessionId']} `options.sessionId` - The session ID of the current session.
     * @returns {Promise<LicenseResponse>} - A promise containing the license response.
     */
    license({ license, sessionId }: License): Promise<LicenseResponse>;
    /**
     * Ban a user with a given reason.
     * This function initiates a user ban and sends a ban request to the API.
     *
     * @see https://keyauth.readme.io/reference/ban
     *
     * @param {Ban} `options` - The ban options including the ban reason, session ID, etc.
     * @param {Ban['sessionId']} `options.sessionId` - The current session ID.
     * @param {Ban['reason']} `options.reason` - The reason for banning the current user.
     * @returns {Promise<BanResponse>} - A promise containing the ban response.
     */
    ban({ reason, sessionId }: Ban): Promise<BanResponse>;
    /**
     * Check if the current session is validated.
     *
     * This function sends a request to the API to check if the provided session ID is validated.
     *
     * @see https://keyauth.readme.io/reference/check-session
     *
     * @param {Check} `options` - The check options including the session ID and skipResponse flag.
     * @param {Check['sessionId']} `options.sessionID` - The current session ID.
     * @param {Check['skipResponse']} `options.skipResponse` - This will just not trigger the response event. [Not really needed]
     * @returns {Promise<CheckResponse>} - A promise containing the check response.
     */
    check({ sessionId, skipResponse, }: Check): Promise<CheckResponse>;
    /**
     * Check if a user is blacklisted based on their hardware ID.
     *
     * This function sends a request to the API to check if the user with the provided hardware ID and session ID is blacklisted.
     *
     * @see https://keyauth.readme.io/reference/check-blacklist
     *
     * @param {CheckBlacklist} options - The check blacklist options including the hardware ID and session ID.
     * @param {CheckBlacklist['hwid']} options.hwid - The HWID of the user you would like to check.
     * @param {CheckBlacklist['sessionId']} options.sessionId - The current session ID.
     * @returns {Promise<CheckBlacklistResponse>} - A promise containing the check blacklist response.
     */
    checkBlacklist({ hwid, sessionId, }: CheckBlacklist): Promise<CheckBlacklistResponse>;
    /**
     * Change the username of a logged-in user.
     *
     * This function sends a request to the API to change the username of a user with the provided session ID and then logs them out.
     *
     * You user must log back in after!
     *
     * @see https://keyauth.readme.io/reference/change-username
     *
     * @param {ChangeUsername} options - The change username options including the new username and session ID.
     * @param {ChangeUsername['newUsername']} options.newUsername - The new username.
     * @param {ChangeUsername['sessionId']} options.sessionId - The current session ID.
     * @returns {Promise<ChangeUsernameResponse>} - A promise containing the change username response.
     */
    changeUsername({ newUsername, sessionId, }: ChangeUsername): Promise<ChangeUsernameResponse>;
    /**
     * Initiate a password reset request for a user.
     *
     * This function sends a request to the API to initiate a password reset for a user with the provided email and username.
     *
     * @see https://keyauth.readme.io/reference/forgot-password
     *
     * @param {ForgotPassword} options - The forgot password options including the email, username, and session ID.
     * @param {ForgotPassword['email']} options.email - The email address of the user requesting the password reset.
     * @param {ForgotPassword['sessionId']} options.sessionId - The current session ID.
     * @param {ForgotPassword['username']} options.username - The current users username.
     * @returns {Promise<ForgotPasswordResponse>} - A promise containing the forgot password response.
     */
    forgotPassword({ email, username, sessionId, }: ForgotPassword): Promise<ForgotPasswordResponse>;
    /**
     * Upgrade a user's account using a key.
     *
     * This function sends a request to the API to upgrade a user's account using the provided key, username, session ID, and metadata.
     *
     * @see https://keyauth.readme.io/reference/upgrade
     *
     * @param {Upgrade} options - The upgrade options including the key, username, session ID.
     * @param {Upgrade['key']} options.key - The license key they are upgrading to.
     * @param {Upgrade['username']} options.username - The current users username.
     * @param {Upgrade['sessionId']} options.sessionId - The current session ID.
     * @returns {Promise<UpgradeResponse>} - A promise containing the upgrade response.
     */
    upgrade({ key, username, sessionId, }: Upgrade): Promise<UpgradeResponse>;
    /**
     * Fetch a list of all currently online users.
     *
     * This function sends a request to the API to retrieve a list of all users who are currently online.
     *
     * @see https://keyauth.readme.io/reference/fetch-online-users
     *
     * @param {FetchOnlineUsers} options - The fetch online users options including the session ID.
     * @param {FetchOnlineUsers['sessionId']} options.sessionID - The current session ID.
     * @returns {Promise<FetchOnlineUsersResponse>} - A promise containing the response with the list of online users.
     */
    fetchOnlineUsers({ sessionId, }: FetchOnlineUsers): Promise<FetchOnlineUsersResponse>;
    /**
     * Fetch application statistics and information.
     *
     * This function sends a request to the API to retrieve statistics and information about the application.
     *
     * @see https://keyauth.readme.io/reference/fetch-stats
     *
     * @param {FetchStats} options - The fetch stats options including the session ID.
     * @param {FetchStats['sessionId']} options.sessionID - The current session ID.
     * @returns {Promise<FetchStatsResponse>} - A promise containing the response with application statistics and information.
     */
    fetchStats({ sessionId }: FetchStats): Promise<FetchStatsResponse>;
    /**
     * Send a log message to the API.
     *
     * This function sends a log message to the API for tracking purposes.
     *
     * @param {Log} options - The log options including the log message, PC user flag, session ID, and passed meta data.
     * @param {Log['msg']} options.msg - The log message you would like to send.
     * @param {Log['pcUser']} options.pcUser - The pcs username or anything else you would like to set it to.
     * @param {Log['sessionId']} options.sessionId - The current session ID.
     * @returns {Promise<LogResponse>} logResponse - A promise containing the response indicating the success of the log operation.
     */
    log({ msg, pcUser, sessionId }: Log): Promise<LogResponse>;
    /**
     * Send a webhook request to the API.
     *
     * This function sends a webhook request to the API with the specified parameters.
     *
     * @see https://keyauth.readme.io/reference/webhook
     *
     * @param {Webhook} options - The webhook options including the web ID, content type, parameters, and session ID.
     * @param {Webhook['webId']} options.webId - The ID of the webhook.
     * @param {Webhook['sessionId']} options.sessionId - The current session ID.
     * @param {Webhook['params']} options.params - The optional webhook params.
     * @param {Webhook['body']} options.body - The webhook body.
     * @param {Webhook['contType']} options.contType - The webhook content type default [Application/json].
     * @returns {Promise<WebhookResponse>} - A promise containing the response indicating the success of the webhook request.
     */
    webhook({ webId, contType, params, sessionId, body, }: Webhook): Promise<WebhookResponse>;
    /**
     * Downloads a file with the specified file ID using the provided session ID.
     *
     * @see https://keyauth.readme.io/reference/download
     *
     * @param {Download} `params` - The parameters for the download request.
     * @param {Download['fileId']} `params.fileId` - The unique identifier of the file to download.
     * @param {Download['sessionId']} `params.sessionId` - The session identifier required for authentication.
     * @returns {Promise<DownloadResponse>} `DownloadResponse` - A promise that resolves with the download response.
     * @throws {Error} `Error` - Throws an error if API initialization is required.
     */
    download({ fileId, sessionId }: Download): Promise<DownloadResponse>;
    /**
     * Manage the current users metadata
     */
    metaData: MetaData;
    /**
     * Manage user and global variables
     */
    var: Var;
    /**
     * Send or receive chat messages
     */
    chat: Chat;
}
//# sourceMappingURL=index.d.ts.map